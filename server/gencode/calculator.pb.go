// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package rpc_calculator_test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TwoNum struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwoNum) Reset()         { *m = TwoNum{} }
func (m *TwoNum) String() string { return proto.CompactTextString(m) }
func (*TwoNum) ProtoMessage()    {}
func (*TwoNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *TwoNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TwoNum.Unmarshal(m, b)
}
func (m *TwoNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwoNum.Marshal(b, m, deterministic)
}
func (m *TwoNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoNum.Merge(m, src)
}
func (m *TwoNum) XXX_Size() int {
	return xxx_messageInfo_TwoNum.Size(m)
}
func (m *TwoNum) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoNum.DiscardUnknown(m)
}

var xxx_messageInfo_TwoNum proto.InternalMessageInfo

func (m *TwoNum) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *TwoNum) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Response struct {
	C                    int32    `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

type OneNum struct {
	A                    int32    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneNum) Reset()         { *m = OneNum{} }
func (m *OneNum) String() string { return proto.CompactTextString(m) }
func (*OneNum) ProtoMessage()    {}
func (*OneNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{2}
}

func (m *OneNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneNum.Unmarshal(m, b)
}
func (m *OneNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneNum.Marshal(b, m, deterministic)
}
func (m *OneNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneNum.Merge(m, src)
}
func (m *OneNum) XXX_Size() int {
	return xxx_messageInfo_OneNum.Size(m)
}
func (m *OneNum) XXX_DiscardUnknown() {
	xxx_messageInfo_OneNum.DiscardUnknown(m)
}

var xxx_messageInfo_OneNum proto.InternalMessageInfo

func (m *OneNum) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func init() {
	proto.RegisterType((*TwoNum)(nil), "rpc.calculator.test.TwoNum")
	proto.RegisterType((*Response)(nil), "rpc.calculator.test.Response")
	proto.RegisterType((*OneNum)(nil), "rpc.calculator.test.OneNum")
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf) }

var fileDescriptor_c686ea360062a8cf = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2e, 0x2a,
	0x48, 0xd6, 0x43, 0x12, 0x2d, 0x49, 0x2d, 0x2e, 0x51, 0x52, 0xe1, 0x62, 0x0b, 0x29, 0xcf, 0xf7,
	0x2b, 0xcd, 0x15, 0xe2, 0xe1, 0x62, 0x4c, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0x4c,
	0x04, 0xf1, 0x92, 0x24, 0x98, 0x20, 0xbc, 0x24, 0x25, 0x09, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x90, 0x4c, 0x32, 0x4c, 0x5d, 0xb2, 0x92, 0x18, 0x17, 0x9b, 0x7f, 0x5e,
	0x2a, 0x86, 0x7e, 0xa3, 0xbd, 0x4c, 0x5c, 0x5c, 0xce, 0x70, 0xbb, 0x84, 0x9c, 0xb9, 0x98, 0x1d,
	0x53, 0x52, 0x84, 0xa4, 0xf5, 0xb0, 0xb8, 0x41, 0x0f, 0xe2, 0x00, 0x29, 0x59, 0xac, 0x92, 0x30,
	0x7b, 0x95, 0x18, 0x84, 0xbc, 0xb9, 0x38, 0xdd, 0x53, 0x4b, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73,
	0x29, 0x33, 0xca, 0x80, 0x11, 0x64, 0x58, 0x40, 0x29, 0x7e, 0xc3, 0x20, 0x1e, 0x23, 0x68, 0x98,
	0x06, 0xa3, 0x50, 0x00, 0x17, 0x8f, 0x4b, 0x7e, 0x69, 0x52, 0x4e, 0x2a, 0x35, 0x1c, 0xa7, 0xc1,
	0x68, 0xc0, 0x98, 0xc4, 0x06, 0x8e, 0x33, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x58,
	0x61, 0x0a, 0xc7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	//简单模式
	Add(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (*Response, error)
	//服务端流
	GetStream(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (Calculator_GetStreamClient, error)
	//客户端流
	PutStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_PutStreamClient, error)
	//双向流
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_DoubleStreamClient, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.calculator.test.Calculator/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) GetStream(ctx context.Context, in *TwoNum, opts ...grpc.CallOption) (Calculator_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/rpc.calculator.test.Calculator/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_GetStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type calculatorGetStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorGetStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[1], "/rpc.calculator.test.Calculator/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorPutStreamClient{stream}
	return x, nil
}

type Calculator_PutStreamClient interface {
	Send(*OneNum) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type calculatorPutStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorPutStreamClient) Send(m *OneNum) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorPutStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[2], "/rpc.calculator.test.Calculator/DoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorDoubleStreamClient{stream}
	return x, nil
}

type Calculator_DoubleStreamClient interface {
	Send(*TwoNum) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type calculatorDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorDoubleStreamClient) Send(m *TwoNum) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorDoubleStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	//简单模式
	Add(context.Context, *TwoNum) (*Response, error)
	//服务端流
	GetStream(*TwoNum, Calculator_GetStreamServer) error
	//客户端流
	PutStream(Calculator_PutStreamServer) error
	//双向流
	DoubleStream(Calculator_DoubleStreamServer) error
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) Add(ctx context.Context, req *TwoNum) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCalculatorServer) GetStream(req *TwoNum, srv Calculator_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedCalculatorServer) PutStream(srv Calculator_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (*UnimplementedCalculatorServer) DoubleStream(srv Calculator_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.calculator.test.Calculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*TwoNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TwoNum)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).GetStream(m, &calculatorGetStreamServer{stream})
}

type Calculator_GetStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type calculatorGetStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorGetStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).PutStream(&calculatorPutStreamServer{stream})
}

type Calculator_PutStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*OneNum, error)
	grpc.ServerStream
}

type calculatorPutStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorPutStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorPutStreamServer) Recv() (*OneNum, error) {
	m := new(OneNum)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).DoubleStream(&calculatorDoubleStreamServer{stream})
}

type Calculator_DoubleStreamServer interface {
	Send(*Response) error
	Recv() (*TwoNum, error)
	grpc.ServerStream
}

type calculatorDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorDoubleStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorDoubleStreamServer) Recv() (*TwoNum, error) {
	m := new(TwoNum)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.calculator.test.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Calculator_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _Calculator_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _Calculator_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
